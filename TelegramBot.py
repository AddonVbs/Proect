from Setings import Token
import telebot
from telebot import types
import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


token = Token

bot = telebot.TeleBot(token)

DB_PATH = "tasks.db"

@bot.message_handler(content_types=['text'])
def strat(message):
    if message.text == "/start":
        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üîë")
        btn2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å‚öôÔ∏è")
        btn3 = types.KeyboardButton("–ü–æ–º–æ—â—åüåå")
        markup.add(btn1,btn2,btn3)

tasks = [
    {"id": 1, "task": "–°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É", "date": "2025-02-13", "status": "üïí –í –ø—Ä–æ—Ü–µ—Å—Å–µ"},
    {"id": 2, "task": "–ü—Ä–æ—á–∏—Ç–∞—Ç—å 10 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏", "date": "2025-02-13", "status": "üïí –í –ø—Ä–æ—Ü–µ—Å—Å–µ"},
    {"id": 3, "task": "–ò–∑—É—á–∏—Ç—å Python 30 –º–∏–Ω—É—Ç", "date": "2025-02-14", "status": "üïí –í –ø—Ä–æ—Ü–µ—Å—Å–µ"},
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
def get_tasks_for_today():
    today = datetime.today().strftime('%Y-%m-%d')
    return [t for t in tasks if t["date"] == today]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∑–∞ –≥–æ–¥
def get_tasks_for_year():
    year = datetime.today().strftime('%Y')
    return [t for t in tasks if t["date"].startswith(year)]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
def update_task_status(task_id, new_status):
    for task in tasks:
        if task["id"] == task_id:
            task["status"] = new_status
            return True
    return False

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–¥–∞—á
def generate_task_buttons(task_list):
    markup = InlineKeyboardMarkup()
    for task in task_list:
        btn_text = f"{task['task']} - {task['status']}"
        btn = InlineKeyboardButton(btn_text, callback_data=f"task_{task['id']}")
        markup.add(btn)
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /today
@bot.message_handler(commands=['today'])
def send_today_tasks(message):
    today_tasks = get_tasks_for_today()
    if today_tasks:
        bot.send_message(message.chat.id, "–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=generate_task_buttons(today_tasks))
    else:
        bot.send_message(message.chat.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ /year
@bot.message_handler(commands=['year'])
def send_year_tasks(message):
    year_tasks = get_tasks_for_year()
    if year_tasks:
        bot.send_message(message.chat.id, "–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –∑–∞ –≥–æ–¥:", reply_markup=generate_task_buttons(year_tasks))
    else:
        bot.send_message(message.chat.id, "–ó–∞ –≥–æ–¥ –∑–∞–¥–∞—á –Ω–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞)
@bot.callback_query_handler(func=lambda call: call.data.startswith("task_"))
def handle_task_callback(call):
    task_id = int(call.data.split("_")[1])
    if update_task_status(task_id, "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"):
        bot.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")






bot.polling(none_stop=True, interval=0)
